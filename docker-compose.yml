version: "3.8"

services:
    # PostgreSQL Database
    db:
        image: postgres:15-alpine
        container_name: task_manager_db
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=${DB_NAME:-task_management}
            - POSTGRES_USER=${DB_USER:-postgres}
            - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app_network
        restart: unless-stopped

    # Django Application
    web:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: task_manager_web
        command: >-
            sh -c "
              echo 'Waiting for database...' &&
              python src/manage.py migrate --noinput &&
              echo 'Collecting static files...' &&
              python src/manage.py collectstatic --noinput --clear &&
              cd src &&
              echo 'Starting Gunicorn...' &&
              gunicorn config.wsgi:application --bind 0.0.0.0:8000
            "
        user: root
        volumes:
            - ./src:/app/src
            - static_volume:/app/src/staticfiles
            - media_volume:/app/media
        env_file:
            - .env
        environment:
            - PYTHONUNBUFFERED=1
        depends_on:
            db:
                condition: service_healthy
        networks:
            - app_network
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Nginx Reverse Proxy
    nginx:
        image: nginx:alpine
        container_name: task_manager_nginx
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
            - static_volume:/app/src/staticfiles:ro
            - media_volume:/app/media:ro
            - /etc/letsencrypt/:/etc/letsencrypt/
            - ./certbot/www:/var/www/certbot:ro
            - nginx_logs:/var/log/nginx
        depends_on:
            - web
        networks:
            - app_network
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--quiet",
                    "--tries=1",
                    "--spider",
                    "http://localhost/health/",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    postgres_data:
        driver: local
    static_volume:
        driver: local
    media_volume:
        driver: local
    nginx_logs:
        driver: local

networks:
    app_network:
        driver: bridge
