version: "3.8"
services:
  db:
    image: postgres:16-alpine
    container_name: task_manager_db
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task_manager_web
    command: >-
      sh -c "
        echo 'Waiting for database...' &&
        until pg_isready -h db -p 5432 -U ${DB_USER}; do
          echo 'Database not ready, sleeping...';
          sleep 2;
        done &&
        echo 'Database ready! Running migrations...' &&
        python src/manage.py migrate --noinput &&
        echo 'Collecting static files...' &&
        python src/manage.py collectstatic --noinput --clear &&
        cd src &&
        echo 'Starting Gunicorn...' &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000
      "
    user: root
    volumes:
      - ./src:/app/src
      - static_volume:/app/src/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: task_manager_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/src/staticfiles:ro
      - media_volume:/app/media:ro
      - /etc/letsencrypt/:/etc/letsencrypt/
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pg_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  nginx_logs:
    driver: local

networks:
  app_network:
    driver: bridge
